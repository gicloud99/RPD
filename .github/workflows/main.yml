name: RDP + Sunshine (Full Admin)

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure RDP and Firewall
        shell: pwsh
        run: |
          # Enable Remote Desktop
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name 'fDenyTSConnections' -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name 'UserAuthentication' -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name 'SecurityLayer' -Value 0 -Force

          # Open RDP and Sunshine firewall ports
          $rules = @(
            @{Name="RDP"; Port=3389; Proto="TCP"},
            @{Name="Sunshine-TCP"; Port=47984; Proto="TCP"},
            @{Name="Sunshine-UDP"; Port=47989; Proto="UDP"}
          )
          foreach ($r in $rules) {
            netsh advfirewall firewall delete rule name=$r.Name | Out-Null
            netsh advfirewall firewall add rule name=$r.Name dir=in action=allow protocol=$r.Proto localport=$r.Port profile=any | Out-Null
          }

          Restart-Service -Name TermService -Force
          Write-Host "RDP + Firewall configured."

      - name: Create Administrator User
        shell: pwsh
        run: |
          $username = "Datlohehe"
          $password = "OLXQ@1234"
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force

          if (-not (Get-LocalUser -Name $username -ErrorAction SilentlyContinue)) {
              New-LocalUser -Name $username -Password $securePass -AccountNeverExpires -Description "Admin User for RDP"
          } else {
              (Get-LocalUser -Name $username) | Set-LocalUser -Password $securePass
          }

          Add-LocalGroupMember -Group "Administrators" -Member $username -ErrorAction SilentlyContinue
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username -ErrorAction SilentlyContinue

          echo "RDP_CREDS=User:$username|Password:$password" >> $env:GITHUB_ENV
          Write-Host "User created with full admin rights."

      - name: Install Tailscale
        shell: pwsh
        run: |
          $url = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $file = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $url -OutFile $file -UseBasicParsing
          Start-Process -FilePath "msiexec.exe" -ArgumentList "/i","`"$file`"","/quiet","/norestart" -Wait
          Remove-Item $file -Force
          Write-Host "Tailscale installed."

      - name: Connect to Tailscale
        shell: pwsh
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          $exe = Join-Path $env:ProgramFiles "Tailscale\tailscale.exe"
          if (-not (Test-Path $exe)) { Write-Error "tailscale.exe not found"; exit 1 }

          $hostname = "ghrunner-" + $env:GITHUB_RUN_NUMBER
          & $exe up --authkey=$env:TAILSCALE_AUTH_KEY --hostname=$hostname | Out-Null

          $ip = $null; $retry = 0
          while (-not $ip -and $retry -lt 20) {
              $out = & $exe ip -4 2>$null
              if ($out) {
                  $ip = ($out -split "`n" | Where-Object { $_ -match '^\d{1,3}(\.\d{1,3}){3}$' } | Select-Object -First 1)
              }
              Start-Sleep -Seconds 5
              $retry++
          }

          if (-not $ip) {
              Write-Error "No Tailscale IP assigned."
              exit 1
          }

          Add-Content -Path $env:GITHUB_ENV -Value ("TAILSCALE_IP=" + $ip)
          Write-Host "Connected to Tailscale. IP: $ip"

      - name: Install Sunshine (Moonlight support)
        shell: pwsh
        run: |
          $installer = "$env:TEMP\sunshine-installer.exe"
          Invoke-WebRequest -Uri "https://github.com/LizardByte/Sunshine/releases/latest/download/Sunshine-Windows-Installer.exe" -OutFile $installer
          Start-Process -FilePath $installer -ArgumentList "/S" -Wait
          Remove-Item $installer -Force -ErrorAction SilentlyContinue
          Write-Host "Sunshine installed."

      - name: Verify Connectivity
        shell: pwsh
        run: |
          $ip = $env:TAILSCALE_IP
          Write-Host "Checking $ip ..."

          $r = Test-NetConnection -ComputerName $ip -Port 3389 -WarningAction SilentlyContinue
          if (-not $r.TcpTestSucceeded) { Write-Error "RDP port 3389 not reachable"; exit 1 }
          Write-Host "RDP connectivity OK."

          $s = Test-NetConnection -ComputerName $ip -Port 47984 -WarningAction SilentlyContinue
          if ($s.TcpTestSucceeded) { Write-Host "Sunshine web port 47984 reachable." }
          else { Write-Host "Sunshine HTTP port closed (normal if service not yet active)." }

      - name: Keep Session Alive
        shell: pwsh
        run: |
          $creds = (Get-Content -Path $env:GITHUB_ENV | Where-Object { $_ -like 'RDP_CREDS=*' }) -split '=' | Select-Object -Last 1
          $ip = $env:TAILSCALE_IP
          Write-Host "`n===== CONNECTION INFO ====="
          Write-Host "Tailscale IP: $ip"
          Write-Host "RDP: $ip:3389"
          Write-Host "Credentials: $creds"
          Write-Host "Sunshine Web: https://$ip:47984"
          Write-Host "===========================`n"

          while ($true) {
              Write-Host "[$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')] Session alive."
              Start-Sleep -Seconds 300
          }
